/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var region = /* color: #d63000 */ee.Geometry.MultiPoint(),
    mask = 
    /* color: #98ff00 */
    /* displayProperties: [
      {
        "type": "rectangle"
      }
    ] */
    ee.Geometry.Polygon(
        [[[152.71549376372232, -27.45010366171173],
          [152.71549376372232, -27.88430982736121],
          [153.4447112930192, -27.88430982736121],
          [153.4447112930192, -27.45010366171173]]], null, false),
    poi = /* color: #d63000 */ee.Geometry.Point([152.90501058516625, -27.646022462068306]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Sylhet-Sunamganj Flood 2022 - Animation
// Author: Palash Basak
// Email: Palash.Basak@gmail.com
// Date: 21 June 2022

var startDate = '2022-02-01';
var endDate = '2022-03-30';

Map.centerObject(mask, 8);

// Sentiel 1 image collection
var col = ee.ImageCollection('COPERNICUS/S1_GRD')
    .filter(ee.Filter.eq('instrumentMode', 'IW'))
    .filterDate(startDate, endDate)
    .filterBounds(poi)
    .map(function(image) {
        var VV = image.select('VV');
        var VH = image.select('VH');
        var VVVH = VV.divide(VH).rename('VVVH').toDouble();
        var doy = ee.Date(image.get('system:time_start')).getRelative('day', 'year');
        
        return image.addBands(VVVH)
                  .set('month', ee.Image(image).date().get('month'))
                  .set('day', ee.Image(image).date().get('day'))
                  .set('doy', doy); 
    }
  );

var distinctDOY = col.filterDate(startDate, endDate);

// Define a filter that identifies which images from the complete collection
// match the DOY from the distinct DOY collection.
var filter = ee.Filter.equals({leftField: 'doy', rightField: 'doy'});

// Define a join.
var join = ee.Join.saveAll('doy_matches');

// Apply the join and convert the resulting FeatureCollection to an
// ImageCollection.
var joinCol = ee.ImageCollection(join.apply(distinctDOY, col, filter));

print(joinCol);

// Apply median reduction among matching DOY collections.
var comp = joinCol.map(function(img) {
  var doyCol = ee.ImageCollection.fromImages(
    img.get('doy_matches')
  );
  return doyCol.reduce(ee.Reducer.median());
});

print('comp', comp);

// Define RGB visualization parameters.
var visParams = {
  bands: ['VH_median','VV_median','VVVH_median'], 
  min: -20, 
  max: -7
};


var style = require('users/gena/packages:style');
var utils = require('users/gena/packages:utils');
var text = require('users/gena/packages:text');


// Create RGB visualization images for use as animation frames.
var rgbVis = comp.map(function(img) {
  var textVis = {fontSize: 32, textColor: 'yellow',
    outlineColor: '000000', outlineWidth: 2, 
    outlineOpacity: 0.8
  };
  
  // Title
  var label_title = 'sss';
  var scale = 100;
  var locate = text.getLocation(mask, 'right', '12%','82%');
  var title_text = text.draw(label_title, locate, scale, textVis);
  
  var label_title2 = 'aaa';
  var scale2 = 100;
  var locate2 = text.getLocation(mask, 'right', '46%','20%');
  var title_text2 = text.draw(label_title2, locate2, scale2, textVis);
  
  // Image Date and Time
  var imageId = ee.String(ee.Image(img).id());
  var dt = ee.String(imageId.split("_").get(4));
  var year = dt.slice(0, 4);
  var month = dt.slice(4,6);
  var day = dt.slice(6,8);
  var dayPlusOne = ee.String(ee.Number.parse(day).add(1));
  day = ee.String(ee.Algorithms.If(dt.slice(9,11).compareTo('11'), dayPlusOne, day));
  var hour = ee.Algorithms.If(dt.slice(9,11).compareTo('11'), '09', '05');
  var amPm = ee.Algorithms.If(dt.slice(9,11).compareTo('11'), ' AM', ' PM');
  var min = dt.slice(11,13);
  var imageDate = day.cat("-").cat(month).cat("-").cat(year).cat(" ").cat(hour).cat(":").cat(min).cat(amPm);
  var scale3 = 150;
  var locate3 = text.getLocation(mask, 'right', '88%','95%');
  var label_imageDate = text.draw(imageDate, locate3, scale3, textVis);
  

  return img.visualize(visParams)
            .clip(mask)
            .blend(title_text)
            .blend(title_text2)
            .blend(label_imageDate);
});

print(rgbVis);

// Define GIF visualization parameters.
var gifParams = {
  'region': mask,
  'dimensions': 1200,
  'crs': 'EPSG:3857',
  'framesPerSecond': 1
};

// Print the GIF URL to the console.
print(rgbVis.getVideoThumbURL(gifParams));

// Render the GIF animation in the console.
print(ui.Thumbnail(rgbVis, gifParams));